# logi-grammar

#######################################################################
#
#  EBNF-Directives
#
#######################################################################

# Regular expression for implicit whitespace or one of: horizontal, linefeed, vertical
# Implicit whitespace is denoted by the tilde-character: ~
@ whitespace  = linefeed

# Implicit whitespace adjacent to literals: left, right, both, none
# E.g. if @literalws = right then ")" means the same as `)`~
@ literalws   = right

# Regular expression for comments, e.g. /#.*(?:\n|$)/
# Use: /(?:\/\/.*)|(?:\/\*(?:.|\n)*?\*\/)/ for C++-style comments: /* ... */ or // to EOL
@ comment     = /;.*?(?:\n|$)/

# Case-sensitivity: True, False
@ ignorecase  = False

# Tree-simplification while parsing:  none, flatten, merge_treetops, merge
@ reduction   = merge         # anonymous nodes are being merged where possible

# Tags that may be replaced with their content while parsing
@ disposable  = _EOF, _cdot

# Tags that will be dropped with all their content while parsing or any of
# the special values: strings, backticked, whitespace, regexps
# Here, EOF and insignificant whitespace (tilde) will be dropped
@ drop        = whitespace, strings, _EOF, _cdot


#######################################################################
#
#:  Structure and Components
#
#######################################################################

principia       = ~ { numbering assertion } EOF
  numbering     = "*" chapter _cdot number ~

assertion       = definition | axiom | theorem

definition      = formula "Df"
axiom           = _assertion_sign formula "Pp"
theorem         = _assertion_sign formula

#######################################################################
#
#:  Formulae
#
#######################################################################

formula         =

#######################################################################
#
#:  Atomic Expressions
#
#######################################################################

chapter         = _nat_number
number          = _nat_number

pvar            = /[pqrstuvw]/      # propositional variable
ivar            = /[xyz]/           # individual variable
cvar            = /[x̂ŷẑ]/ | /^[xyz]/ # circonflexed variable
iconst          = /[abcde]/         # individual constant
hovar           = /[fghϕψχ]/        # higher order variable

#######################################################################
#
#:  Disposables
#
#######################################################################

_delimiter      = _d1 | _d2 | _d3 | _d4
  _d1           = `.`
  _d2           = `:`
  _d3           = `:.`
  _d4           = `::`

_nat_number     = /[1-9]\d*/
_cdot           = `·` | `.`
_assertion_sign = `⊢` | `|-`
_exists_sign    = `∃`
_unique_sign    = `E`
_EOF            = !/./          # no more characters ahead, end of file
